{"remainingRequest":"/Users/antoine/.config/yarn/global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/antoine/Code/ds-components-image/Illustration.vue?vue&type=style&index=0&module=true&lang=css&","dependencies":[{"path":"/Users/antoine/Code/ds-components-image/Illustration.vue","mtime":1606215768643},{"path":"/Users/antoine/.config/yarn/global/node_modules/css-loader/dist/cjs.js","mtime":1604389901226},{"path":"/Users/antoine/.config/yarn/global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1606206886092},{"path":"/Users/antoine/.config/yarn/global/node_modules/postcss-loader/src/index.js","mtime":1604389901353},{"path":"/Users/antoine/.config/yarn/global/node_modules/cache-loader/dist/cjs.js","mtime":1604389901219},{"path":"/Users/antoine/.config/yarn/global/node_modules/vue-loader/lib/index.js","mtime":1606206886092}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmltYWdlIHsKICBtYXgtd2lkdGg6IDEwMCU7Cn0KCi5lcnJvciB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIC8qIFRPRE86IFN3aXRjaCB0byBEUyBjb2xvciAoZ3JleS0yMDApLiAqLwogIGJhY2tncm91bmQ6ICNmMmYyZjI7Cn0KCi8qIFRPRE86IFJlbW92ZSB0aGlzLiBJdCBzaG91bGQgYmUgbWFuYWdlZCBieSB0aGUgc2tlbGV0b24gY29tcG9uZW50LiAqLwouc2tlbGV0b24gewogIGJhY2tncm91bmQ6ICM7Cn0K"},{"version":3,"sources":["Illustration.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Illustration.vue","sourceRoot":".","sourcesContent":["<template>\n  <div>\n    <!-- The template we show when the request fails for whatever reason. -->\n    <!-- It may be overriden using the `error` slot from the parent. -->\n    <slot name=\"error\" v-if=\"error\">\n      <!-- Note that there is no need to make sure that `height` and `width` -->\n      <!-- are properly defined. Vue compiler will get rid of wrong values. -->\n      <div\n        :class=\"$style.error\"\n        :style=\"{ height: `${height}px`, width: `${width}px` }\"\n      >\n        <!-- TODO: Render an icon instead. -->\n        Oops!\n      </div>\n    </slot>\n\n    <!-- The template we show when the image is being downloaded. -->\n    <!-- It may be overriden using the `placeholder` slot from the parent. -->\n    <slot name=\"placeholder\" v-else-if=\"downloading\">\n      <!-- TODO: Render a skeleton instead. -->\n      <!-- Note that there is no need to make sure that `height` and `width` -->\n      <!-- are properly defined. Vue compiler will get rid of wrong values. -->\n      <div\n        :class=\"$style.skeleton\"\n        :style=\"{ height: `${height}px`, width: `${width}px` }\"\n      />\n    </slot>\n\n    <!-- Using the `sources` slot, we may pass source elements to -->\n    <!-- request different files based on media queries. -->\n    <picture v-if=\"hasSources && error === false\">\n      <slot name=\"sources\" />\n      <img\n        v-bind=\"$attrs\"\n        :class=\"$style.image\"\n        :height=\"height\"\n        :width=\"width\"\n        :loading=\"loading\"\n        v-on=\"$listeners\"\n        @load=\"onLoad\"\n        @error=\"onError\"\n      />\n    </picture>\n\n    <!-- The most simple case. -->\n    <img\n      v-else-if=\"error === false\"\n      v-bind=\"$attrs\"\n      :class=\"$style.image\"\n      :height=\"height\"\n      :width=\"width\"\n      :loading=\"loading\"\n      v-on=\"$listeners\"\n      @load=\"onLoad\"\n      @error=\"onError\"\n    />\n  </div>\n</template>\n\n<script>\nconst Loading = {\n  Lazy: 'lazy',\n  Eager: 'eager',\n}\n\nexport default {\n  inheritAttrs: false,\n\n  props: {\n    height: {\n      type: [Number, String],\n      required: false,\n    },\n\n    width: {\n      type: [Number, String],\n      required: false,\n    },\n\n    loading: {\n      type: String, // See \"Loading\" enum above.\n      default: Loading.Lazy,\n    },\n  },\n\n  data() {\n    return {\n      error: false,\n      downloading: this.loading === Loading.Lazy,\n    }\n  },\n\n  computed: {\n    hasSources() {\n      return Boolean(this.$slots.sources)\n    },\n  },\n\n  methods: {\n    onLoad() {\n      this.downloading = false\n    },\n\n    onError() {\n      this.error = true\n    },\n  },\n}\n</script>\n\n<style module>\n.image {\n  max-width: 100%;\n}\n\n.error {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  /* TODO: Switch to DS color (grey-200). */\n  background: #f2f2f2;\n}\n\n/* TODO: Remove this. It should be managed by the skeleton component. */\n.skeleton {\n  background: #;\n}\n</style>\n"]}]}